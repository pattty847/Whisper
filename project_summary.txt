--- .\app.py ---
# app.py
import os
import json
import time
import uuid
import hashlib
import threading
import logging
from datetime import datetime
from flask import Flask, request, redirect, url_for, render_template, send_file
from flask_httpauth import HTTPBasicAuth
from werkzeug.utils import secure_filename

import moviepy.editor as mp
import torch
import whisper
import yt_dlp

# Set up logging
logging.basicConfig(level=logging.INFO)

HISTORY_FILE = "history.json"

def load_history():
    if not os.path.exists(HISTORY_FILE):
        with open(HISTORY_FILE, "w") as f:
            f.write("[]")
    try:
        with open(HISTORY_FILE, "r") as f:
            data = f.read().strip()
            if not data:
                return []
            return json.loads(data)
    except json.JSONDecodeError:
        logging.warning("history.json is corrupted. Resetting history.")
        with open(HISTORY_FILE, "w") as f:
            f.write("[]")
        return []

def save_to_history(video_url, video_filename, transcript_filename):
    history = load_history()
    history_entry = {
        "video_url": video_url,
        "video_filename": video_filename,
        "transcript_filename": transcript_filename,
        "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    }
    history.append(history_entry)
    with open(HISTORY_FILE, "w") as f:
        json.dump(history, f, indent=4)

app = Flask(__name__)
auth = HTTPBasicAuth()
users = {"user": "pass"}

@auth.get_password
def get_pw(username):
    return users.get(username)

# Folders
app.config['UPLOAD_FOLDER'] = 'uploads'
app.config['TRANSCRIPTS_FOLDER'] = 'transcripts'
os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)
os.makedirs(app.config['TRANSCRIPTS_FOLDER'], exist_ok=True)

# Load Whisper model (optionally add your model selection logic)
device = "cuda" if torch.cuda.is_available() else "cpu"
model = whisper.load_model("base", device=device)
logging.info("✅ Loaded Whisper model: base")

# --- JOB MANAGEMENT (replacing global progress) ---
# Each job (keyed by a unique job_id) will have its own progress and results.
jobs = {}       # { job_id: { "progress": 0, "error": None, "transcript": None, ... } }
jobs_lock = threading.Lock()

def get_unique_filename(url):
    return hashlib.md5(url.encode()).hexdigest()

def download_video(url, output_path_base):
    unique_filename = get_unique_filename(url)
    output_path_base = os.path.join(app.config['UPLOAD_FOLDER'], unique_filename)
    ydl_opts = {
        'outtmpl': output_path_base + '.%(ext)s',
        'format': 'bestvideo+bestaudio/best',
        'merge_output_format': 'mp4',
        'postprocessors': [{'key': 'FFmpegVideoConvertor', 'preferedformat': 'mp4'}],
        'quiet': True,
        'noplaylist': True
    }
    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            result = ydl.extract_info(url, download=True)
            video_path = ydl.prepare_filename(result)
            thumbnail_url = result.get("thumbnail", "/static/default-thumbnail.png")
            return {
                "path": video_path if os.path.exists(video_path) else None,
                "title": result.get("title", "Unknown"),
                "thumbnail": thumbnail_url,
                "uploader": result.get("uploader", "Unknown")
            }
    except Exception as e:
        logging.error(f"Error downloading video: {e}")
        return None

def extract_audio_and_transcribe(video_path, output_audio_path, output_transcript_path, job_id):
    # Step 1: Extract audio
    try:
        video = mp.VideoFileClip(video_path)
        video.audio.write_audiofile(output_audio_path, logger=None)
    except Exception as e:
        logging.error(f"Audio extraction failed: {e}")
        with jobs_lock:
            jobs[job_id]["error"] = "Audio extraction failed."
        return

    with jobs_lock:
        jobs[job_id]["progress"] = 60

    # Step 2: Transcribe audio
    try:
        transcription_result = model.transcribe(output_audio_path)
        transcript_text = transcription_result["text"]
    except Exception as e:
        logging.error(f"Transcription failed: {e}")
        with jobs_lock:
            jobs[job_id]["error"] = "Transcription failed."
        return

    # Save transcript to file
    try:
        with open(output_transcript_path, "w") as f:
            f.write(transcript_text)
    except Exception as e:
        logging.error(f"Saving transcript failed: {e}")
        with jobs_lock:
            jobs[job_id]["error"] = "Saving transcript failed."
        return

    with jobs_lock:
        jobs[job_id]["progress"] = 100
        jobs[job_id]["transcript_filename"] = os.path.basename(output_transcript_path)
        jobs[job_id]["video_title"] = os.path.basename(video_path).rsplit(".", 1)[0]
    # Optionally remove temporary audio file:
    try:
        os.remove(output_audio_path)
    except Exception:
        pass

def process_video(job_id, form_data):
    with jobs_lock:
        jobs[job_id]["progress"] = 10

    video_title = "Unknown"
    video_thumbnail = "/static/default-thumbnail.png"
    video_uploader = "Unknown"

    # Use the pre-saved file if available
    if "file_path" in form_data:
        video_path = form_data["file_path"]
        video_title = os.path.splitext(os.path.basename(video_path))[0]
    elif "url" in form_data and form_data["url"]:
        video_url = form_data["url"]
        with jobs_lock:
            jobs[job_id]["progress"] = 20
        video_info = download_video(video_url, os.path.join(app.config['UPLOAD_FOLDER'], "downloaded_video"))
        if video_info is None or video_info["path"] is None:
            with jobs_lock:
                jobs[job_id]["error"] = "Failed to download video."
            return
        video_path = video_info["path"]
        video_title = video_info.get("title", "Unknown")
        video_thumbnail = video_info.get("thumbnail", video_thumbnail)
        video_uploader = video_info.get("uploader", "Unknown")
    else:
        with jobs_lock:
            jobs[job_id]["error"] = "No file or URL provided."
        return

    if not os.path.exists(video_path):
        with jobs_lock:
            jobs[job_id]["error"] = "Video file could not be found."
        return

    with jobs_lock:
        jobs[job_id]["progress"] = 40

    # Define paths for audio and transcript
    base_name = os.path.splitext(os.path.basename(video_path))[0]
    audio_filename = f"{base_name}.wav"
    transcript_filename = f"{base_name}_transcript.txt"
    output_audio_path = os.path.join(app.config['UPLOAD_FOLDER'], audio_filename)
    output_transcript_path = os.path.join(app.config['TRANSCRIPTS_FOLDER'], transcript_filename)

    with jobs_lock:
        jobs[job_id]["progress"] = 50

    extract_audio_and_transcribe(video_path, output_audio_path, output_transcript_path, job_id)

    with jobs_lock:
        if not jobs[job_id].get("error"):
            save_to_history(video_title, os.path.basename(video_path), transcript_filename)
            jobs[job_id]["video_thumbnail"] = video_thumbnail
            jobs[job_id]["video_uploader"] = video_uploader
            jobs[job_id]["video_url"] = form_data.get("url", "Uploaded File")


@app.route('/', methods=['GET', 'POST'])
@auth.login_required
def upload_file():
    if request.method == 'POST':
        # Create a new job and start a background thread
        job_id = str(uuid.uuid4())
        with jobs_lock:
            jobs[job_id] = {"progress": 0, "error": None}

        form_data = {}
        if 'file' in request.files and request.files['file'].filename:
            file = request.files['file']
            filename = secure_filename(file.filename)
            video_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
            # Save the file in the main thread
            file.save(video_path)
            form_data["file_path"] = video_path
        elif 'url' in request.form and request.form['url']:
            form_data["url"] = request.form['url']

        # Start the processing thread
        thread = threading.Thread(target=process_video, args=(job_id, form_data))
        thread.start()

        # Redirect to a processing page that polls the job progress.
        return redirect(url_for('job_status', job_id=job_id))
    return render_template('upload.html')


@app.route('/job/<job_id>')
@auth.login_required
def job_status(job_id):
    # This page shows a progress bar and will redirect when job is done.
    return render_template('processing.html', job_id=job_id)

@app.route('/progress/<job_id>')
def get_progress(job_id):
    with jobs_lock:
        job = jobs.get(job_id)
        if not job:
            return {"progress": 0, "error": "Job not found"}
        return {
            "progress": job["progress"],
            "error": job["error"],
            "transcript_filename": job.get("transcript_filename"),
            "video_title": job.get("video_title"),
            "video_thumbnail": job.get("video_thumbnail"),
            "video_uploader": job.get("video_uploader")
        }

@app.route('/transcript/<filename>')
@auth.login_required
def view_transcript(filename):
    transcript_path = os.path.join(app.config['TRANSCRIPTS_FOLDER'], filename)
    if not os.path.exists(transcript_path):
        return 'Transcript not found', 404
    with open(transcript_path, 'r') as file:
        transcript_text = file.read()
    title = request.args.get("title", "Unknown Title")
    thumbnail = request.args.get("thumbnail", "")
    uploader = request.args.get("uploader", "Unknown Uploader")
    return render_template('transcript.html', transcript_text=transcript_text, filename=filename, title=title, thumbnail=thumbnail, uploader=uploader)

@app.route('/downloads/<filename>')
@auth.login_required
def download_transcript(filename):
    transcript_path = os.path.join(app.config['TRANSCRIPTS_FOLDER'], filename)
    if not os.path.exists(transcript_path):
        return 'Transcript not found', 404
    return send_file(
        transcript_path,
        as_attachment=True,
        download_name=filename,
        mimetype='text/plain'
    )

@app.route('/history')
@auth.login_required
def history():
    history_data = load_history()
    return render_template('history.html', history_data=history_data)

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)


--- .\static\default-thumbnail.png ---


--- .\static\styles.css ---
/* Base Styles */
body {
    font-family: 'Segoe UI', system-ui, -apple-system, sans-serif;
    background-color: #f4f4f9;
    margin: 0;
    padding: 20px;
    line-height: 1.6;
    color: #333;
}

.container {
    max-width: 90%;
    margin: auto;
    background-color: #fff;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}

/* Common Button Styles */
button, .btn {
    padding: 10px 20px;
    border-radius: 6px;
    border: none;
    cursor: pointer;
    font-size: 1rem;
    font-weight: 500;
    transition: background-color 0.2s, transform 0.1s;
}

button:hover, .btn:hover {
    transform: translateY(-1px);
}

.btn-primary {
    background-color: #007bff;
    color: white;
}

.btn-primary:hover {
    background-color: #0056b3;
}

.btn-danger {
    background-color: #dc3545;
    color: white;
}

.btn-danger:hover {
    background-color: #c82333;
}

.btn-success {
    background-color: #28a745;
    color: white;
}

.btn-success:hover {
    background-color: #218838;
}

/* Common Form Styles */
input[type="text"],
input[type="file"] {
    width: 100%;
    padding: 12px;
    border: 1px solid #ccc;
    border-radius: 6px;
    font-size: 16px;
    transition: border-color 0.2s;
}

input[type="text"]:focus,
input[type="file"]:focus {
    border-color: #007bff;
    outline: none;
}

/* Common Responsive Breakpoints */
@media (min-width: 768px) {
    .container {
        max-width: 700px;
    }
}

@media (min-width: 992px) {
    .container {
        max-width: 900px;
    }
}

/* Back to Home Button Responsive */
@media (max-width: 480px) {
    .btn-danger {
        width: auto;
        font-size: 14px;
        padding: 8px 12px;
        position: absolute;
        top: 10px;
        left: 10px;
    }
}

--- .\templates\base.html ---
<!doctype html>
<html>
<head>
    <title>{% block title %}My App{% endblock %}</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="{{ url_for('static', filename='styles.css') }}">
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.2/dist/js/bootstrap.bundle.min.js"></script>
    {% block extra_head %}{% endblock %}
</head>
<body>
    <div class="container">
        {% block content %}{% endblock %}
    </div>
</body>
</html>

--- .\templates\history.html ---
{% extends "base.html" %}

{% block title %}Transcript History{% endblock %}

{% block extra_head %}
<style>
    .history-container {
        margin-top: 30px;
    }

    .history-item {
        background: white;
        padding: 20px;
        border-radius: 8px;
        margin-bottom: 15px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.05);
        transition: transform 0.2s;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .history-item:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }

    .history-info {
        flex: 1;
    }

    .history-info .timestamp {
        font-weight: 600;
        color: #2c3e50;
        margin-bottom: 5px;
    }

    .history-info .video-url {
        color: #666;
        word-break: break-all;
    }

    .history-info .video-url a {
        color: #007bff;
        text-decoration: none;
    }

    .history-info .video-url a:hover {
        text-decoration: underline;
    }

    .history-actions {
        display: flex;
        gap: 10px;
        margin-left: 20px;
    }

    .btn-view, .btn-download, .btn-video {
        padding: 8px 15px;
        border-radius: 6px;
        color: white;
        text-decoration: none;
        display: flex;
        align-items: center;
        gap: 5px;
        font-size: 0.9rem;
        transition: transform 0.1s;
    }

    .btn-view {
        background-color: #4CAF50;
    }

    .btn-download {
        background-color: #2196F3;
    }

    .btn-video {
        background-color: #f44336;
    }

    .btn-view:hover, .btn-download:hover, .btn-video:hover {
        transform: translateY(-1px);
        color: white;
        text-decoration: none;
    }

    @media (max-width: 768px) {
        .history-item {
            flex-direction: column;
            gap: 15px;
        }

        .history-actions {
            margin-left: 0;
            width: 100%;
            justify-content: center;
        }

        .history-info {
            text-align: center;
        }
    }
</style>
{% endblock %}

{% block content %}
<h1>Transcript History</h1>
<button onclick="window.location.href='/'" class="btn btn-danger">⬅️ Back to Home</button>

<div class="history-container">
    {% if history_data %}
        {% for item in history_data %}
        <div class="history-item">
            <div class="history-info">
                <div class="timestamp">{{ item.timestamp }}</div>
                <div class="video-url">
                    Video: <a href="{{ item.video_url }}" target="_blank">{{ item.video_url }}</a>
                </div>
            </div>
            <div class="history-actions">
                <a href="{{ url_for('view_transcript', filename=item.transcript_filename) }}" class="btn-view">
                    📜 View
                </a>
                <a href="{{ url_for('download_transcript', filename=item.transcript_filename) }}" class="btn-download">
                    ⬇️ Download
                </a>
                <a href="{{ item.video_url }}" target="_blank" class="btn-video">
                    ▶️ Watch
                </a>
            </div>
        </div>
        {% endfor %}
    {% else %}
        <div class="no-history">
            <p>No transcription history available.</p>
        </div>
    {% endif %}
</div>
{% endblock %}

--- .\templates\processing.html ---
{% extends "base.html" %}

{% block title %}Processing Your Video{% endblock %}

{% block content %}
<div class="container">
    <h2>Processing Your Video</h2>
    <div id="progress-container" style="display: block; width: 100%; background-color: #ddd; border-radius: 8px; margin: 20px 0;">
        <div id="progress-bar" style="width: 0%; height: 25px; background-color: #4CAF50; text-align: center; line-height: 25px; color: white; border-radius: 8px; transition: width 0.5s ease-in-out;">
            <span id="progress-text">0%</span>
        </div>
    </div>
    <div id="status-text" style="margin-top: 10px; color: #666;">Starting process...</div>
    <div id="error-text" style="margin-top: 10px; color: #dc3545; display: none;"></div>
</div>
{% endblock %}

{% block extra_head %}
<script>
    let progressInterval;

    function updateProgress() {
        console.log("Updating progress...");
        const jobId = "{{ job_id }}";
        fetch(`/progress/${jobId}`)
            .then(response => response.json())
            .then(data => {
                console.log("Progress data:", data);
                
                const progressBar = document.getElementById("progress-bar");
                const progressText = document.getElementById("progress-text");
                const statusText = document.getElementById("status-text");
                const errorText = document.getElementById("error-text");

                // Update progress bar and text
                progressBar.style.width = data.progress + "%";
                progressText.innerText = data.progress + "%";

                // Update status message
                if (data.progress < 20) {
                    statusText.innerText = "Starting process...";
                } else if (data.progress < 40) {
                    statusText.innerText = "Downloading video...";
                } else if (data.progress < 60) {
                    statusText.innerText = "Extracting audio...";
                } else if (data.progress < 100) {
                    statusText.innerText = "Transcribing...";
                }

                // Handle errors
                if (data.error) {
                    errorText.innerText = "Error: " + data.error;
                    errorText.style.display = "block";
                    clearInterval(progressInterval);
                    return;
                }

                // Handle completion
                if (data.progress === 100 && data.transcript_filename) {
                    clearInterval(progressInterval);
                    // Redirect to transcript page with metadata
                    const params = new URLSearchParams({
                        title: data.video_title || "Unknown Title",
                        thumbnail: data.video_thumbnail || "",
                        uploader: data.video_uploader || "Unknown Uploader"
                    });
                    window.location.href = `/transcript/${data.transcript_filename}?${params.toString()}`;
                }
            })
            .catch(error => {
                console.error("Error fetching progress:", error);
                document.getElementById("error-text").innerText = "Error: Failed to fetch progress";
                document.getElementById("error-text").style.display = "block";
            });
    }

    // Start progress updates when page loads
    document.addEventListener("DOMContentLoaded", function() {
        console.log("Page loaded, starting progress updates...");
        updateProgress(); // Initial update
        progressInterval = setInterval(updateProgress, 2000); // Poll every 2 seconds
    });
</script>
{% endblock %}

--- .\templates\transcript.html ---
{% extends "base.html" %}

{% block title %}Transcript{% endblock %}

{% block extra_head %}
<style>
    .transcript-container {
        margin: 20px 0;
        padding: 20px;
        background: #f8f9fa;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    #transcript-text {
        white-space: pre-wrap;       /* Preserves whitespace and wraps text */
        word-wrap: break-word;       /* Breaks long words to prevent overflow */
        font-family: 'Segoe UI', system-ui, -apple-system, sans-serif;
        font-size: 16px;
        line-height: 1.6;
        color: #333;
        background: transparent;
        border: none;
        padding: 15px;
        margin: 0;
        width: 100%;
        max-width: 100%;
        overflow-x: auto;
    }

    .action-buttons {
        margin-top: 20px;
        display: flex;
        gap: 10px;
        justify-content: center;
    }

    .action-buttons button {
        padding: 10px 20px;
        border: none;
        border-radius: 6px;
        cursor: pointer;
        font-weight: 500;
        transition: background-color 0.2s;
    }

    .download {
        background-color: #007bff;
        color: white;
    }

    .copy {
        background-color: #28a745;
        color: white;
    }

    .download:hover {
        background-color: #0056b3;
    }

    .copy:hover {
        background-color: #218838;
    }

    .video-info {
        background: white;
        padding: 20px;
        border-radius: 8px;
        margin: 20px 0;
        box-shadow: 0 2px 4px rgba(0,0,0,0.05);
    }

    .video-info img {
        max-width: 200px;
        height: auto;
        border-radius: 4px;
        margin-bottom: 15px;
    }

    @media (max-width: 768px) {
        .transcript-container {
            padding: 15px;
            margin: 10px 0;
        }

        #transcript-text {
            font-size: 14px;
            padding: 10px;
        }

        .action-buttons {
            flex-direction: column;
        }

        .action-buttons button {
            width: 100%;
        }

        .video-info img {
            max-width: 150px;
        }
    }
</style>
{% endblock %}

{% block content %}
<button onclick="window.location.href='/'" class="btn btn-danger">⬅️ Back to Home</button>

<h1>Transcript</h1>

<!-- Video Metadata -->
<div class="video-info">
    <h2>Video Info</h2>
    {% if thumbnail %}
        <img src="{{ thumbnail }}" alt="Video Thumbnail">
    {% endif %}
    <p><strong>Title:</strong> {{ title }}</p>
    <p><strong>Uploader:</strong> {{ uploader }}</p>
</div>

<div class="transcript-container">
    <pre id="transcript-text">{{ transcript_text }}</pre>
</div>

<div class="action-buttons">
    <a href="{{ url_for('download_transcript', filename=filename) }}" download>
        <button class="download">⬇️ Download Transcript</button>
    </a>
    <button class="copy" onclick="copyToClipboard()">📋 Copy to Clipboard</button>
</div>

<script>
    function copyToClipboard() {
        const text = document.getElementById('transcript-text').innerText;
        if (navigator.clipboard && navigator.clipboard.writeText) {
            navigator.clipboard.writeText(text)
                .then(() => {
                    const copyBtn = document.querySelector('.copy');
                    copyBtn.textContent = '✅ Copied!';
                    setTimeout(() => {
                        copyBtn.textContent = '📋 Copy to Clipboard';
                    }, 2000);
                })
                .catch(err => {
                    console.error('Clipboard write failed:', err);
                    fallbackCopyText(text);
                });
        } else {
            fallbackCopyText(text);
        }
    }
    
    function fallbackCopyText(text) {
        const textarea = document.createElement('textarea');
        textarea.value = text;
        document.body.appendChild(textarea);
        textarea.select();
        try {
            document.execCommand('copy');
            alert('Transcript copied to clipboard!');
        } catch (err) {
            alert('Failed to copy transcript.');
        }
        document.body.removeChild(textarea);
    }
</script>
{% endblock %}

--- .\templates\upload.html ---
{% extends "base.html" %}

{% block title %}Video to Text Transcription{% endblock %}

{% block extra_head %}
<style>
    .upload-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        width: 100%;
        max-width: 500px;
        margin: auto;
    }

    .upload-box {
        background: #fff;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
        width: 100%;
        text-align: center;
        margin-top: 20px;
    }

    .custom-file-upload {
        display: inline-block;
        background-color: #007bff;
        color: white;
        padding: 12px 15px;
        border-radius: 6px;
        font-weight: bold;
        cursor: pointer;
        transition: background 0.3s;
    }

    .custom-file-upload:hover {
        background-color: #0056b3;
    }

    .custom-file-upload input {
        display: none;
    }

    #file-name {
        display: block;
        margin-top: 10px;
        font-size: 14px;
        color: #555;
    }

    .divider {
        margin: 20px 0;
        font-weight: bold;
        color: #666;
        position: relative;
        text-align: center;
    }

    .divider::before,
    .divider::after {
        content: "";
        display: inline-block;
        width: 40%;
        height: 1px;
        background: #ddd;
        position: relative;
        top: -5px;
    }

    .divider::before {
        margin-right: 10px;
    }

    .divider::after {
        margin-left: 10px;
    }

    @media (max-width: 480px) {
        .upload-box {
            padding: 15px;
        }

        .custom-file-upload {
            width: 100%;
        }
    }
</style>

<script>
    document.addEventListener("DOMContentLoaded", function() {
        document.getElementById("file-upload").addEventListener("change", function () {
            let fileName = this.files.length > 0 ? this.files[0].name : "No file chosen";
            document.getElementById("file-name").innerText = fileName;
        });
    });
</script>
{% endblock %}

{% block content %}
<div class="upload-container">
    <a href="/history" class="btn btn-primary btn-lg">📜 View History</a>

    <div class="upload-box">
        <form method="post" enctype="multipart/form-data">
            <label for="file-upload" class="custom-file-upload">
                Choose File
                <input type="file" name="file" id="file-upload" accept="video/*">
            </label>
            <span id="file-name">No file chosen</span>

            <div class="divider">OR</div>

            <input type="text" name="url" class="form-control" placeholder="Enter video URL (YouTube, Instagram, TikTok)">

            <button type="submit" class="btn btn-success btn-lg">Submit</button>
        </form>
    </div>
</div>
{% endblock %}

