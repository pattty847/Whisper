--- app.py ---
# app.py
from datetime import datetime
import json
import time
from flask import Flask, request, redirect, url_for, render_template, send_file, session
from flask_httpauth import HTTPBasicAuth
import hashlib
import moviepy.editor as mp
import whisper
import os
from werkzeug.utils import secure_filename
import yt_dlp
import threading

progress = {"step": 0}  # Track processing steps
progress_lock = threading.Lock()

HISTORY_FILE = "history.json"

def load_history():
    """Load previous transcripts from file, ensuring it doesn't break on empty JSON."""
    if not os.path.exists(HISTORY_FILE):
        with open(HISTORY_FILE, "w") as f:  # Create an empty JSON list if file doesn't exist
            f.write("[]")

    try:
        with open(HISTORY_FILE, "r") as f:
            data = f.read().strip()  # Read and remove any accidental spaces or newlines
            
            if not data:  # If the file is empty, return an empty list
                return []
            
            return json.loads(data)  # Convert JSON to Python list safely
    except json.JSONDecodeError:
        print("⚠️ WARNING: history.json is corrupted. Resetting history.")
        with open(HISTORY_FILE, "w") as f:
            f.write("[]")  # Reset to an empty JSON list
        return []


def save_to_history(video_url, video_filename, transcript_filename):
    """Save new transcript to history."""
    history = load_history()
    history_entry = {
        "video_url": video_url,
        "video_filename": video_filename,
        "transcript_filename": transcript_filename,
        "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    }
    history.append(history_entry)
    
    with open(HISTORY_FILE, "w") as f:
        json.dump(history, f, indent=4)


app = Flask(__name__)
auth = HTTPBasicAuth()

# Configure user credentials
users = {"user": "pass"}

@auth.get_password
def get_pw(username):
    if username in users:
        return users.get(username)
    return None

app.config['UPLOAD_FOLDER'] = 'uploads'  # Folder to store uploaded videos
app.config['TRANSCRIPTS_FOLDER'] = 'transcripts'  # Folder to store transcripts

# Ensure the upload and transcript folders exist
os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)
os.makedirs(app.config['TRANSCRIPTS_FOLDER'], exist_ok=True)

# Load Whisper model globally to avoid loading it every time
model = whisper.load_model("base")

def get_unique_filename(url):
    """Generate a unique filename based on the URL."""
    return hashlib.md5(url.encode()).hexdigest()  # Creates a unique hash for each video URL


def download_video(url, output_path_base):
    unique_filename = get_unique_filename(url)
    output_path_base = os.path.join(app.config['UPLOAD_FOLDER'], unique_filename)

    ydl_opts = {
        'outtmpl': output_path_base + '.%(ext)s',
        'format': 'bestvideo+bestaudio/best',
        'merge_output_format': 'mp4',
        'postprocessors': [{'key': 'FFmpegVideoConvertor', 'preferedformat': 'mp4'}],
        'quiet': False,
        'noplaylist': True
    }

    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            result = ydl.extract_info(url, download=True)
            video_path = ydl.prepare_filename(result)
            
            # Use a default placeholder if thumbnail is missing
            thumbnail_url = result.get("thumbnail", "/static/default-thumbnail.jpg")  

            return {
                "path": video_path if os.path.exists(video_path) else None,
                "title": result.get("title", "Unknown"),
                "thumbnail": thumbnail_url,
                "uploader": result.get("uploader", "Unknown")
            }
    except Exception as e:
        print(f"Error downloading video: {e}")
        return None

def extract_audio_and_transcribe(video_path, output_audio_path, output_transcript_path):
    video = mp.VideoFileClip(video_path)
    duration = video.duration  # Get video length in seconds
    audio = video.audio
    audio.write_audiofile(output_audio_path)

    with progress_lock:
        progress["step"] = 70  # Midway update

    start_time = time.time()
    result = model.transcribe(output_audio_path)

    with progress_lock:
        progress["step"] = 85  # Near completion update

    # Save transcript
    with open(output_transcript_path, "w") as f:
        f.write(result["text"])

    elapsed_time = time.time() - start_time
    estimated_total = (elapsed_time / (70 - 40)) * 100  # Extrapolate ETA
    final_progress = min(100, 85 + (100 - 85) * (elapsed_time / estimated_total))

    with progress_lock:
        progress["step"] = final_progress



@app.route('/', methods=['GET', 'POST'])
@auth.login_required
def upload_file():
    global progress
    if request.method == 'POST':
        with progress_lock:
            progress["step"] = 10  # Start progress

        video_info = None
        if 'file' in request.files and request.files['file'].filename:
            file = request.files['file']
            filename = secure_filename(file.filename)
            video_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
            file.save(video_path)
        elif 'url' in request.form and request.form['url']:
            video_url = request.form['url']
            filename = secure_filename("downloaded_video")
            output_path_base = os.path.join(app.config['UPLOAD_FOLDER'], filename)

            with progress_lock:
                progress["step"] = 20  # Download started

            video_info = download_video(video_url, output_path_base)

            if video_info is None or video_info["path"] is None:
                return 'Failed to download video', 400

            video_path = video_info["path"]  # Extract the correct video path

        if not os.path.exists(video_path):
            return 'Video file could not be found', 400

        with progress_lock:
            progress["step"] = 40  # Video downloaded

        # Define paths for audio and transcript
        audio_filename = f"{os.path.splitext(os.path.basename(video_path))[0]}.wav"
        output_audio_path = os.path.join(app.config['UPLOAD_FOLDER'], audio_filename)
        transcript_filename = f"{os.path.splitext(os.path.basename(video_path))[0]}_transcript.txt"
        output_transcript_path = os.path.join(app.config['TRANSCRIPTS_FOLDER'], transcript_filename)

        with progress_lock:
            progress["step"] = 60  # Audio extraction started

        extract_audio_and_transcribe(video_path, output_audio_path, output_transcript_path)

        with progress_lock:
            progress["step"] = 100  # Done

        save_to_history(video_info.get("title", "Unknown"), os.path.basename(video_path), transcript_filename)

        return redirect(url_for('view_transcript', filename=transcript_filename, title=video_info.get("title", "Unknown"), thumbnail=video_info.get("thumbnail", ""), uploader=video_info.get("uploader", "Unknown")))

    return render_template('upload.html')


@app.route('/history')
@auth.login_required
def history():
    history_data = load_history()
    return render_template('history.html', history_data=history_data)


@app.route('/progress')
def get_progress():
    with progress_lock:
        return {"progress": progress["step"]}


@app.route('/transcript/<filename>')
@auth.login_required
def view_transcript(filename):
    transcript_path = os.path.join(app.config['TRANSCRIPTS_FOLDER'], filename)

    if not os.path.exists(transcript_path):
        return 'Transcript not found', 404

    with open(transcript_path, 'r') as file:
        transcript_text = file.read()

    # Retrieve metadata from query parameters
    title = request.args.get("title", "Unknown Title")
    thumbnail = request.args.get("thumbnail", "")
    uploader = request.args.get("uploader", "Unknown Uploader")

    return render_template('transcript.html', transcript_text=transcript_text, filename=filename, title=title, thumbnail=thumbnail, uploader=uploader)


@app.route('/downloads/<filename>')
@auth.login_required
def download_transcript(filename):
    transcript_path = os.path.join(app.config['TRANSCRIPTS_FOLDER'], filename)
    
    if not os.path.exists(transcript_path):
        return 'Transcript not found', 404

    return send_file(
        transcript_path,
        as_attachment=True,
        download_name=filename,
        mimetype='text/plain'
    )


if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)


--- history.json ---
[
    {
        "video_url": "https://www.instagram.com/reel/DF_J4BJT9QR/",
        "video_filename": "77d2b97020bc83db2ac311baf6257763.mp4",
        "transcript_filename": "77d2b97020bc83db2ac311baf6257763_transcript.txt",
        "timestamp": "2025-02-12 17:18:31"
    },
    {
        "video_url": "https://www.instagram.com/reel/DF_J4BJT9QR/",
        "video_filename": "77d2b97020bc83db2ac311baf6257763.mp4",
        "transcript_filename": "77d2b97020bc83db2ac311baf6257763_transcript.txt",
        "timestamp": "2025-02-12 17:36:09"
    },
    {
        "video_url": "v0f025gc0000cr1gptnog65l6qte5st0.wav",
        "video_filename": "v0f025gc0000cr1gptnog65l6qte5st0.mp4",
        "transcript_filename": "v0f025gc0000cr1gptnog65l6qte5st0_transcript.txt",
        "timestamp": "2025-02-12 19:42:19"
    },
    {
        "video_url": "608995726ef814773c35edc95ffca568.wav",
        "video_filename": "608995726ef814773c35edc95ffca568.mp4",
        "transcript_filename": "608995726ef814773c35edc95ffca568_transcript.txt",
        "timestamp": "2025-02-12 19:48:48"
    },
    {
        "video_url": "6294b8d4a3904f18a9c5fd16734b57ca.wav",
        "video_filename": "6294b8d4a3904f18a9c5fd16734b57ca.mp4",
        "transcript_filename": "6294b8d4a3904f18a9c5fd16734b57ca_transcript.txt",
        "timestamp": "2025-02-13 12:45:11"
    },
    {
        "video_url": "28287fd5d849bd406e330f7cdeb45c9a.wav",
        "video_filename": "28287fd5d849bd406e330f7cdeb45c9a.mp4",
        "transcript_filename": "28287fd5d849bd406e330f7cdeb45c9a_transcript.txt",
        "timestamp": "2025-02-13 14:34:30"
    },
    {
        "video_url": "07ec185f20c3391f42c23d7f5e6c2edc.wav",
        "video_filename": "07ec185f20c3391f42c23d7f5e6c2edc.mp4",
        "transcript_filename": "07ec185f20c3391f42c23d7f5e6c2edc_transcript.txt",
        "timestamp": "2025-02-13 15:09:04"
    },
    {
        "video_url": "Video by staytunednbc",
        "video_filename": "77d2b97020bc83db2ac311baf6257763.mp4",
        "transcript_filename": "77d2b97020bc83db2ac311baf6257763_transcript.txt",
        "timestamp": "2025-02-13 15:34:28"
    },
    {
        "video_url": "Video by evanthorizon",
        "video_filename": "2b433bce7152c582b870f25be246c1c7.mp4",
        "transcript_filename": "2b433bce7152c582b870f25be246c1c7_transcript.txt",
        "timestamp": "2025-02-13 15:47:46"
    }
]

--- templates/base.html ---
<!doctype html>
<html>
<head>
    <title>{% block title %}My App{% endblock %}</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="{{ url_for('static', filename='styles.css') }}">
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.2/dist/js/bootstrap.bundle.min.js"></script>
    {% block extra_head %}{% endblock %}
</head>
<body>
    <div class="container">
        {% block content %}{% endblock %}
    </div>
</body>
</html>

--- templates/upload.html ---
{% extends "base.html" %}

{% block title %}Video to Text Transcription{% endblock %}

{% block content %}
<div style="text-align: center; margin-bottom: 20px;">
    <a href="/history" class="btn btn-primary">📜 View History</a>
</div>

<form method="post" enctype="multipart/form-data" onsubmit="showProgress()">
    <input type="file" name="file" accept="video/*">
    <p>OR</p>
    <input type="text" name="url" placeholder="Enter video URL (YouTube, Instagram, TikTok)">
    <input type="submit" value="Submit">
</form>

<p id="loading">Processing, please wait... ⏳</p>
<div id="progress-container">
    <div id="progress-bar">0%</div>
</div>
{% endblock %}

{% block extra_head %}
<script>
    function showProgress() {
        document.getElementById("loading").style.display = "block";
        document.getElementById("progress-container").style.display = "block";
        updateProgress();
    }

    function updateProgress() {
        fetch('/progress')
            .then(response => response.json())
            .then(data => {
                let progressBar = document.getElementById("progress-bar");
                progressBar.style.width = data.progress + "%";
                progressBar.innerText = data.progress + "%";

                if (data.progress < 100) {
                    setTimeout(updateProgress, 1000);
                } else {
                    document.getElementById("loading").innerText = "✅ Done!";
                }
            });
    }
</script>
{% endblock %}

--- templates/history.html ---
{% extends "base.html" %}

{% block title %}Transcript History{% endblock %}

{% block content %}
<h1>Transcript History</h1>
{% if history %}
    {% for item in history %}
    <div class="history-item">
        <div>
            <strong>{{ item.timestamp }}</strong><br>
            Video URL: <a href="{{ item.video_url }}" target="_blank">{{ item.video_url }}</a>
        </div>
        <div>
            <a href="{{ url_for('view_transcript', filename=item.transcript_filename) }}" class="btn btn-view">📜 View Transcript</a>
            <a href="{{ url_for('download_transcript', filename=item.transcript_filename) }}" class="btn btn-download">⬇️ Download</a>
            <a href="{{ item.video_url }}" target="_blank" class="btn btn-video">▶️ Watch Video</a>
        </div>
    </div>
    {% endfor %}
{% else %}
    <p>No history available.</p>
{% endif %}
<br>
<button onclick="window.location.href='/'" class="btn btn-danger">⬅️ Back to Home</button>
{% endblock %}

--- templates/transcript.html ---
{% extends "base.html" %}

{% block title %}Transcript{% endblock %}

{% block content %}
<button onclick="window.location.href='/'" class="btn btn-danger">⬅️ Back to Home</button>

<h1>Transcript</h1>

<!-- Video Metadata -->
<h2>Video Info:</h2>
{% if thumbnail %}
    <img src="{{ thumbnail }}" alt="Video Thumbnail" width="200">
{% endif %}
<p><strong>Title:</strong> {{ title }}</p>
<p><strong>Uploader:</strong> {{ uploader }}</p>

<pre id="transcript-text">{{ transcript_text }}</pre>

<a href="{{ url_for('download_transcript', filename=filename) }}" download>
    <button class="download">Download Transcript</button>
</a>
<button class="copy" onclick="copyToClipboard()">Copy to Clipboard</button>
{% endblock %}

{% block extra_head %}
<script>
    function copyToClipboard() {
        const text = document.getElementById('transcript-text').innerText;
        if (navigator.clipboard) {
            navigator.clipboard.writeText(text).then(() => {
                alert('Transcript copied to clipboard!');
            }, () => {
                alert('Failed to copy transcript.');
            });
        } else {
            // Fallback for older browsers
            const textarea = document.createElement('textarea');
            textarea.value = text;
            document.body.appendChild(textarea);
            textarea.select();
            try {
                document.execCommand('copy');
                alert('Transcript copied to clipboard!');
            } catch (err) {
                alert('Failed to copy transcript.');
            }
            document.body.removeChild(textarea);
        }
    }
</script>
{% endblock %}


--- static/styles.css ---
body {
    font-family: Arial, sans-serif;
    background-color: #f4f4f9;
    margin: 0;
    padding: 20px;
    text-align: center;
}

.container {
    max-width: 700px;
    margin: auto;
    background-color: #fff;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}

h1 {
    color: #333;
}

button, .btn {
    padding: 10px 15px;
    border-radius: 5px;
    border: none;
    cursor: pointer;
    font-size: 16px;
}

.btn-primary {
    background-color: #007bff;
    color: white;
    text-decoration: none;
    padding: 10px 20px;
    display: inline-block;
    margin-top: 10px;
}

.btn-danger {
    background-color: #dc3545;
    color: white;
}

.btn-success {
    background-color: #28a745;
    color: white;
}

.history-item {
    padding: 10px;
    border-bottom: 1px solid #ddd;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.history-item:last-child {
    border-bottom: none;
}

pre {
    white-space: pre-wrap;
    word-wrap: break-word;
    background-color: #f9f9f9;
    padding: 10px;
    border-radius: 4px;
    border: 1px solid #ccc;
}

.download {
    background-color: #007BFF;
    color: white;
}

.copy {
    background-color: #28a745;
    color: white;
}

#loading {
    display: none;
    font-size: 18px;
    color: #007BFF;
    margin-top: 20px;
}

#progress-container {
    display: none;
    width: 100%;
    background-color: #ddd;
    border-radius: 8px;
    margin-top: 10px;
}

#progress-bar {
    width: 0%;
    height: 20px;
    background-color: #4CAF50;
    text-align: center;
    line-height: 20px;
    color: white;
    border-radius: 8px;
}

